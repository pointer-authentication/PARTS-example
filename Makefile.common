# Author: Hans Liljestrand <hans@liljestrand.dev>
# Copyright: Secure Systems Group, Aalto University, https://ssg.aalto.fi
#
# This code is released under Apache 2.0 license

mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
mkfile_dir := $(dir $(mkfile_path))
-include $(mkfile_dir)Makefile.local

################################################################
# instrumenation configuration, overriden in Makefile.local    #
################################################################
USE_PAUTH ?= yes
USE_BECFI ?= yes
USE_FECFI ?= yes
USE_DPI ?= yes
USE_DUMMY ?= no
O_LEVEL ?= 0
################################################################
# path configuration, these can be overriden in Makefile.local #
################################################################
# The Linaro gcc installation to use
LINARO_GCC 	?= $(mkfile_dir)gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu
# The Linaro sysroot to use
SYSROOT 	?= $(mkfile_dir)sysroot-glibc-linaro-2.25-2018.05-aarch64-linux-gnu
# The LLVM installation or build directory to use
LLVM 		?= $(mkfile_dir)parts-build

#################################################
# The below paths should not need to be changed #
#################################################
# Locate some binaryies
LLVM_LINKER 	:= ${LLVM}/bin/llvm-link
LLVM_DIS 		:= ${LLVM}/bin/llvm-dis
LLVM_OPT 		:= ${LLVM}/bin/opt
LLVM_CONFIG 	:= ${LLVM}/bin/llvm-config
CLANG 			:= ${LLVM}/bin/clang
CLANGPP 		:= ${LLVM}/bin/clang++
LLC 			:= ${LLVM}/bin/llc
GCC 			:= ${LINARO_GCC}/bin/aarch64-linux-gnu-gcc

# Flags for compiling directly with Clang
CFLAGS += -O$(O_LEVEL)
CFLAGS += --target=aarch64-linux-gnu
CFLAGS += -march=armv8.3-a
CFLAGS += -I$(SYSROOT)/usr/include
CFLAGS += -B$(LINARO_GCC)
CFLAGS += -Wall
CFLAGS += -Wextra
CFLAGS += -fPIC
CFLAGS += -fvisibility=hidden
CFLAGS += --sysroot=$(SYSROOT)
CFLAGS += -DPAUTH_ARMV8_3_A
CFLAGS += -fno-stack-protector
CFLAGS += -D_FORTIFY_SOURCE=0
CFLAGS += $(PARTS_CFLAGS)
CFLAGS += -static

ifeq ($(USE_PAUTH), yes)
ifeq ($(USE_BECFI), yes)
	CFLAGS += -mllvm -parts-becfi=full
	LLC_FLAGS += -parts-becfi=ng-full
endif
ifeq ($(USE_FECFI), yes)
	CFLAGS += -mllvm -parts-cpi=full
	OPT_FLAGS += -parts-fecfi
	OPT_FLAGS += -parts-opt-cpi
	LLC_FLAGS += -parts-fecfi
	NEED_GLOBALS_FIX = yes
endif
ifeq ($(USE_DPI), yes)
	CFLAGS += -mllvm -parts-dpp=full
	OPT_FLAGS += -parts-dpi
	OPT_FLAGS += -parts-opt-dpi
	OPT_FLAGS += -parts-opt-mainargs
	OPT_FLAGS += -parts-dpi-union-type-punning
	LLC_FLAGS += -parts-dpi
	NEED_GLOBALS_FIX = yes
endif
ifeq ($(NEED_GLOBALS_FIX), yes)
	OPT_FLAGS += -parts-opt-globals
endif
endif

SOURCES ?= $(wildcard *.c)
BIN ?= $(shell basename $(shell pwd)).out

$(BIN): $(SOURCES)
	${CLANG} ${CFLAGS} $^ -o $@

${SOURCES:.c=.ll}: %.ll : %.c
	${CLANG} ${C_FLAGS} -S -emit-llvm -c $<

${BIN:=.linked.ll}: ${SOURCES:.c=.ll}
	${LLVM_LINKER} ${LINKER_FLAGS} -S $^ -o $@

${BIN:=.linked.opt.ll}: %.linked.opt.ll : %.linked.ll
	${LLVM_OPT} ${OPT_FLAGS} -S < $< > $@

$(BIN:=.s): %.s : %.linked.opt.ll
	$(LLC) $(LLC_FLAGS) $< -o $@

.PHONY: dis
dis: $(BIN:=.linked.ll) $(BIN:=.linked.opt.ll)

.PHONY: clean
clean::
	rm -rf $(CLEAN_FILES) *.bc *.o *.s $(BIN) $(BIN) *.linked_bc *.ll *.dump a.out
